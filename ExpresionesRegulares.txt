import java.util.regex.Matcher; 
import java.util.regex.Pattern; 

public class ConcordancesRegex { 
    public static void main(String args[]) { 
        Pattern expresion = Pattern.compile("J.*\\d\\d-\\d[0-35-9]-\\d\\d"); 
        String cadena1 = "Joan nació el 05-12-75\n" +
                         "David nació el 11-04-68\n" + 
                         "Jaume nació  el 04-84-73\n" + 
                         "Júlia nació  el 17-12-77"; 
        // compara la expresión regular con la cadena e imprime las concordancias  
        Matcher matcher = expresion.matcher(cadena1); 
        while (matcher.find()) {
            System.out.println(matcher.group());
        }
    } 
} 


import Android.app.Activity; 
import android.os.Bundle; 
import android.view.View; 
import android.widget.Button; 
import android.widget.EditText; 
/** 
* Class which shows how to validate user input with regular expression 
* 
* @author FaYnaSoft Labs 
*/ 
public class Main extends Activity { 
private EditText editText; 
private Button button; 
@Override 
public void onCreate(Bundle savedInstanceState) { 
  super.onCreate(savedInstanceState); 
  setContentView(R.layout.main); 
  editText = (EditText) findViewById(R.id.textId); 
  editText.setText("EditText element"); 
  button = (Button) findViewById(R.id.btnId); 
  button.setText("Check"); 
  button.setOnClickListener(new View.OnClickListener() { 
   @Override 
   public void onClick(View v) { 
    if(checkString(editText.getText().toString())) { 
     editText.setText("Corect"); 
    } 
   } 
  }); 
} 
/** 
  * This method checks if String is correct 
  * @param s - String which need to check 
  * @return value of matching 
  */ 
private boolean checkString(String s) { 
  return s.matches("\\w*[.](Java|cpp|class)"); 
} 
} 
 

Expresión regular encontrar caracteres 
 
 Categoría de artículo: Desarrollo móvil 
String s_Result="Distance: 2.8km (about 9 mins)"; 
 
//Distance parsing 
Pattern p = Pattern.compile("Distance: (\\d+(\\.\\d+)?)(.*?)\\b"); 
Matcher m = p.matcher(s_Result); 
if(m.find()){ 
    MatchResult mr=m.toMatchResult(); 
    f_Distance=mr.group(1);//2.8 
    m_DistanceUnit=mr.group(3);//km 
} 
 
//Time parsing 
p = Pattern.compile("about (\\d+(\\.\\d+)?) (.*)\\b"); 
m = p.matcher(s_Result); 
if(m.find()){ 
    MatchResult mr=m.toMatchResult(); 
    f_timeEst=mr.group(1);//9 
    m_timeEstUnit=mr.group(3);//min 
} 
 O 
String s_Result="Distance: 2.8km (about 9 mins)"; 
Pattern p = Pattern.compile("(\\d+(\\.\\d+)?) ?(\\w+?)\\b"); 
Matcher m = p.matcher(s_Result); 
while(m.find()){ 
    MatchResult mr=m.toMatchResult(); 
    String value=mr.group(1);//2.8 and 9 come here 
    String units=mr.group(3);//km and mins come here 
} 
 
 
 Expresión regular para filtrar caracteres especiales. 
 
 
 Después de buscar durante mucho tiempo en Internet, no encontré una expresión regular adecuada para filtrar caracteres especiales; lo aprendí yo mismo, escribí dos y me di cuenta de los requisitos. 
 Código Java 
 // filtrar caracteres especiales  
    public   static   String StringFilter(String   str)   throws   PatternSyntaxException   {     
                                 // Solo se permiten letras y números       
                // String   regEx  =  "[^a-zA-Z0-9]";                     
                                       // borra todos los caracteres especiales  
          String regEx="[`~!@#$%^&*()+=|{}':;',\\[\\].<>/?~！@#￥%……& amp;*（）——+|{}【】‘；：”“’。，、？]";  
          Pattern   p   =   Pattern.compile(regEx);     
          Matcher   m   =   p.matcher(str);     
          return   m.replaceAll("").trim();     
          }     
    @Test         
    public    void   testStringFilter()   throws   PatternSyntaxException   {     
                     String str = "* adCVs * 34_a _09_b5 * [/ 435 ^ * &   () ^ $$ & *). {} +. |.) %% * (*.  } 34 {45 [] 12.fd ' * & 999 A continuación se muestran los caracteres chinos ￥ ...... {} 【】.,; '“'”? ";     
          System.out.println(str);     
          System.out.println(StringFilter(str));     
          } 